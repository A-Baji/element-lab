{"config": {"indexing": "full", "lang": ["en"], "min_search_length": 3, "prebuild_index": false, "separator": "[\\s\\-]+"}, "docs": [{"location": "", "text": "DataJoint Element - Lab \u00b6 element-lab features a DataJoint pipeline design for lab related information, such as Lab, User, Project, Protocol, Source. element-lab is not a complete workflow by itself, but rather a modular design of tables and dependencies. element-lab can be flexibly attached to any DataJoint workflow. See the Element Lab documentation for the background information and development timeline. For more information on the DataJoint Elements project, please visit https://elements.datajoint.org. This work is supported by the National Institutes of Health. Element architecture \u00b6", "title": "Element Lab"}, {"location": "#datajoint-element-lab", "text": "element-lab features a DataJoint pipeline design for lab related information, such as Lab, User, Project, Protocol, Source. element-lab is not a complete workflow by itself, but rather a modular design of tables and dependencies. element-lab can be flexibly attached to any DataJoint workflow. See the Element Lab documentation for the background information and development timeline. For more information on the DataJoint Elements project, please visit https://elements.datajoint.org. This work is supported by the National Institutes of Health.", "title": "DataJoint Element - Lab"}, {"location": "#element-architecture", "text": "", "title": "Element architecture"}, {"location": "citation/", "text": "Citation \u00b6 If your work uses DataJoint and DataJoint Elements, please cite the respective Research Resource Identifiers (RRIDs) and manuscripts. DataJoint for Python or MATLAB + Yatsenko D, Reimer J, Ecker AS, Walker EY, Sinz F, Berens P, Hoenselaar A, Cotton RJ, Siapas AS, Tolias AS. DataJoint: managing big scientific data using MATLAB or Python. bioRxiv. 2015 Jan 1:031658. doi: https://doi.org/10.1101/031658 + DataJoint ( RRID:SCR_014543 ) - DataJoint for <Select Python or MATLAB> (version <Enter version number> ) DataJoint Elements + Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358 + DataJoint Elements ( RRID:SCR_021894 ) - Element Lab (version <Enter version number> )", "title": "Citation"}, {"location": "citation/#citation", "text": "If your work uses DataJoint and DataJoint Elements, please cite the respective Research Resource Identifiers (RRIDs) and manuscripts. DataJoint for Python or MATLAB + Yatsenko D, Reimer J, Ecker AS, Walker EY, Sinz F, Berens P, Hoenselaar A, Cotton RJ, Siapas AS, Tolias AS. DataJoint: managing big scientific data using MATLAB or Python. bioRxiv. 2015 Jan 1:031658. doi: https://doi.org/10.1101/031658 + DataJoint ( RRID:SCR_014543 ) - DataJoint for <Select Python or MATLAB> (version <Enter version number> ) DataJoint Elements + Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358 + DataJoint Elements ( RRID:SCR_021894 ) - Element Lab (version <Enter version number> )", "title": "Citation"}, {"location": "concepts/", "text": "Most pipelines track some information about the lab, including the facilities, experiment rigs, and users. All interviewed labs have some version of these elements. They also have custom interfaces and GUIs for data entry. Over the past few years, several labs have developed DataJoint-based pipelines for lab management. Our team collaborated with several of them during their projects. Additionally, we interviewed these teams to understand their experiment workflow, associated tools, and interfaces. These teams include: + International Brain Laboratory + BrainCoGs (Princeton Neuroscience Institute), Python pipeline, MATLAB pipeline + MoC3 (Columbia Zuckerman Institute) + Churchland Lab + Costa Lab (private repository) + Hillman Lab Development and validation Through our interviews and direct collaboration on the precursor projects, we identified the common motifs in the lab schemas to create the Lab Management Element. This element works for diverse downstream pipelines and is always used in combination with other elements for specific experiments. As such, it is validated jointly with the acquisition elements such as the Extracellular Array Electrophysiology Element and Calcium Imaging Element.", "title": "Concepts"}, {"location": "tutorials/", "text": "Installation \u00b6 1 pip install element-lab If you already have an older version of element-lab installed using pip , upgrade with 1 pip install --upgrade element-lab Element usage \u00b6 element-lab is not a complete workflow by itself, but rather a modular design of tables and dependencies that can be flexibly attached to any DataJoint workflow. See the workflow-calcium-imaging and workflow-array-ephys repositories for example usages of element-lab .", "title": "Tutorials"}, {"location": "tutorials/#installation", "text": "1 pip install element-lab If you already have an older version of element-lab installed using pip , upgrade with 1 pip install --upgrade element-lab", "title": "Installation"}, {"location": "tutorials/#element-usage", "text": "element-lab is not a complete workflow by itself, but rather a modular design of tables and dependencies that can be flexibly attached to any DataJoint workflow. See the workflow-calcium-imaging and workflow-array-ephys repositories for example usages of element-lab .", "title": "Element usage"}, {"location": "about/changelog/", "text": "../../../CHANGELOG.md", "title": "Changelog"}, {"location": "api/element_lab/__init__/", "text": "", "title": "__init__.py"}, {"location": "api/element_lab/lab/", "text": "activate ( schema_name , create_schema = True , create_tables = True ) \u00b6 activate(schema_name, create_schema=True, create_tables=True) :param schema_name: schema name on the database server to activate the lab element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. Source code in element_lab/lab.py 6 7 8 9 10 11 12 13 14 15 16 17 18 def activate ( schema_name , create_schema = True , create_tables = True ): \"\"\" activate(schema_name, create_schema=True, create_tables=True) :param schema_name: schema name on the database server to activate the `lab` element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. \"\"\" schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables )", "title": "lab.py"}, {"location": "api/element_lab/lab/#element_lab.lab.activate", "text": "activate(schema_name, create_schema=True, create_tables=True) :param schema_name: schema name on the database server to activate the lab element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. Source code in element_lab/lab.py 6 7 8 9 10 11 12 13 14 15 16 17 18 def activate ( schema_name , create_schema = True , create_tables = True ): \"\"\" activate(schema_name, create_schema=True, create_tables=True) :param schema_name: schema name on the database server to activate the `lab` element :param create_schema: when True (default), create schema in the database if it does not yet exist. :param create_tables: when True (default), create tables in the database if they do not yet exist. \"\"\" schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables )", "title": "activate()"}, {"location": "api/element_lab/version/", "text": "Package metadata.", "title": "version.py"}, {"location": "api/element_lab/export/__init__/", "text": "", "title": "__init__.py"}, {"location": "api/element_lab/export/nwb/", "text": "element_lab_to_nwb_dict ( lab_key = None , project_key = None , protocol_key = None ) \u00b6 Generate a dictionary object containing all relevant lab information used when generating an NWB file at the session level. All parameters optional, but should only specify one of respective type mynwbfile = pynwb.NWBFile(identifier=\"your identifier\", session_description=\"your description\", session_start_time=session_datetime, **element_lab_to_nwb_dict( lab_key=key1, project_key=key2, protocol_key=key3)) :param lab_key: Key specifying one entry in element_lab.lab.Lab :param project_key: Key specifying one entry in element_lab.lab.Project :param protocol_key: Key specifying one entry in element_lab.lab.Protocol :return: dictionary with NWB parameters Source code in element_lab/export/nwb.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def element_lab_to_nwb_dict ( lab_key = None , project_key = None , protocol_key = None ): \"\"\" Generate a dictionary object containing all relevant lab information used when generating an NWB file at the session level. All parameters optional, but should only specify one of respective type Use: mynwbfile = pynwb.NWBFile(identifier=\"your identifier\", session_description=\"your description\", session_start_time=session_datetime, **element_lab_to_nwb_dict( lab_key=key1, project_key=key2, protocol_key=key3)) :param lab_key: Key specifying one entry in element_lab.lab.Lab :param project_key: Key specifying one entry in element_lab.lab.Project :param protocol_key: Key specifying one entry in element_lab.lab.Protocol :return: dictionary with NWB parameters \"\"\" # Validate input assert any ([ lab_key , project_key , protocol_key ]), \"Must specify one key.\" assert ( lab_key is None or len ( lab . Lab & lab_key ) == 1 ), \"Multiple labs error! The lab_key should specify only one lab.\" assert project_key is None or len ( lab . Project & project_key ) == 1 , ( \"Multiple projects error! The project_key should specify only one \" \"project.\" ) assert protocol_key is None or len ( lab . Protocol & protocol_key ) == 1 , ( \"Multiple protocols error! The protocol_key should specify only one \" \"protocol.\" ) element_info = dict () if lab_key : element_info . update ( lab_to_nwb_dict ( lab_key )) if project_key : element_info . update ( project_to_nwb_dict ( project_key )) if protocol_key : element_info . update ( protocol_to_nwb_dict ( protocol_key )) return element_info lab_to_nwb_dict ( lab_key ) \u00b6 Generate a dictionary containing all relevant lab and institution info :param lab_key: Key specifying one entry in element_lab.lab.Lab :return: dictionary with NWB parameters Source code in element_lab/export/nwb.py 4 5 6 7 8 9 10 11 12 13 14 def lab_to_nwb_dict ( lab_key ): \"\"\" Generate a dictionary containing all relevant lab and institution info :param lab_key: Key specifying one entry in element_lab.lab.Lab :return: dictionary with NWB parameters \"\"\" lab_info = ( lab . Lab & lab_key ) . fetch1 () return dict ( institution = lab_info . get ( \"institution\" ), lab = lab_info . get ( \"lab_name\" ), ) project_to_nwb_dict ( project_key ) \u00b6 Generate a dictionary object containing relevant project information (e.g., experimental description, related publications, etc.). :param project_key: Key specifying one entry in element_lab.lab.Project :return: dictionary with NWB parameters Source code in element_lab/export/nwb.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def project_to_nwb_dict ( project_key ): \"\"\" Generate a dictionary object containing relevant project information (e.g., experimental description, related publications, etc.). :param project_key: Key specifying one entry in element_lab.lab.Project :return: dictionary with NWB parameters \"\"\" project_info = ( lab . Project & project_key ) . fetch1 () return dict ( experiment_description = project_info . get ( \"project_description\" ), keywords = ( lab . ProjectKeywords () & project_key ) . fetch ( \"keyword\" ) . tolist () or None , related_publications = ( lab . ProjectPublication () & project_key ) . fetch ( \"publication\" ) . tolist () or None , ) protocol_to_nwb_dict ( protocol_key ) \u00b6 Generate a dictionary object containing all protocol title and notes. :param protocol_key: Key specifying one entry in element_lab.lab.Protocol :return: dictionary with NWB parameters Source code in element_lab/export/nwb.py 36 37 38 39 40 41 42 43 44 45 46 def protocol_to_nwb_dict ( protocol_key ): \"\"\" Generate a dictionary object containing all protocol title and notes. :param protocol_key: Key specifying one entry in element_lab.lab.Protocol :return: dictionary with NWB parameters \"\"\" protocol_info = ( lab . Protocol & protocol_key ) . fetch1 () return dict ( protocol = protocol_info . get ( \"protocol\" ), notes = protocol_info . get ( \"protocol_description\" ), )", "title": "nwb.py"}, {"location": "api/element_lab/export/nwb/#element_lab.export.nwb.element_lab_to_nwb_dict", "text": "Generate a dictionary object containing all relevant lab information used when generating an NWB file at the session level. All parameters optional, but should only specify one of respective type mynwbfile = pynwb.NWBFile(identifier=\"your identifier\", session_description=\"your description\", session_start_time=session_datetime, **element_lab_to_nwb_dict( lab_key=key1, project_key=key2, protocol_key=key3)) :param lab_key: Key specifying one entry in element_lab.lab.Lab :param project_key: Key specifying one entry in element_lab.lab.Project :param protocol_key: Key specifying one entry in element_lab.lab.Protocol :return: dictionary with NWB parameters Source code in element_lab/export/nwb.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def element_lab_to_nwb_dict ( lab_key = None , project_key = None , protocol_key = None ): \"\"\" Generate a dictionary object containing all relevant lab information used when generating an NWB file at the session level. All parameters optional, but should only specify one of respective type Use: mynwbfile = pynwb.NWBFile(identifier=\"your identifier\", session_description=\"your description\", session_start_time=session_datetime, **element_lab_to_nwb_dict( lab_key=key1, project_key=key2, protocol_key=key3)) :param lab_key: Key specifying one entry in element_lab.lab.Lab :param project_key: Key specifying one entry in element_lab.lab.Project :param protocol_key: Key specifying one entry in element_lab.lab.Protocol :return: dictionary with NWB parameters \"\"\" # Validate input assert any ([ lab_key , project_key , protocol_key ]), \"Must specify one key.\" assert ( lab_key is None or len ( lab . Lab & lab_key ) == 1 ), \"Multiple labs error! The lab_key should specify only one lab.\" assert project_key is None or len ( lab . Project & project_key ) == 1 , ( \"Multiple projects error! The project_key should specify only one \" \"project.\" ) assert protocol_key is None or len ( lab . Protocol & protocol_key ) == 1 , ( \"Multiple protocols error! The protocol_key should specify only one \" \"protocol.\" ) element_info = dict () if lab_key : element_info . update ( lab_to_nwb_dict ( lab_key )) if project_key : element_info . update ( project_to_nwb_dict ( project_key )) if protocol_key : element_info . update ( protocol_to_nwb_dict ( protocol_key )) return element_info", "title": "element_lab_to_nwb_dict()"}, {"location": "api/element_lab/export/nwb/#element_lab.export.nwb.lab_to_nwb_dict", "text": "Generate a dictionary containing all relevant lab and institution info :param lab_key: Key specifying one entry in element_lab.lab.Lab :return: dictionary with NWB parameters Source code in element_lab/export/nwb.py 4 5 6 7 8 9 10 11 12 13 14 def lab_to_nwb_dict ( lab_key ): \"\"\" Generate a dictionary containing all relevant lab and institution info :param lab_key: Key specifying one entry in element_lab.lab.Lab :return: dictionary with NWB parameters \"\"\" lab_info = ( lab . Lab & lab_key ) . fetch1 () return dict ( institution = lab_info . get ( \"institution\" ), lab = lab_info . get ( \"lab_name\" ), )", "title": "lab_to_nwb_dict()"}, {"location": "api/element_lab/export/nwb/#element_lab.export.nwb.project_to_nwb_dict", "text": "Generate a dictionary object containing relevant project information (e.g., experimental description, related publications, etc.). :param project_key: Key specifying one entry in element_lab.lab.Project :return: dictionary with NWB parameters Source code in element_lab/export/nwb.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def project_to_nwb_dict ( project_key ): \"\"\" Generate a dictionary object containing relevant project information (e.g., experimental description, related publications, etc.). :param project_key: Key specifying one entry in element_lab.lab.Project :return: dictionary with NWB parameters \"\"\" project_info = ( lab . Project & project_key ) . fetch1 () return dict ( experiment_description = project_info . get ( \"project_description\" ), keywords = ( lab . ProjectKeywords () & project_key ) . fetch ( \"keyword\" ) . tolist () or None , related_publications = ( lab . ProjectPublication () & project_key ) . fetch ( \"publication\" ) . tolist () or None , )", "title": "project_to_nwb_dict()"}, {"location": "api/element_lab/export/nwb/#element_lab.export.nwb.protocol_to_nwb_dict", "text": "Generate a dictionary object containing all protocol title and notes. :param protocol_key: Key specifying one entry in element_lab.lab.Protocol :return: dictionary with NWB parameters Source code in element_lab/export/nwb.py 36 37 38 39 40 41 42 43 44 45 46 def protocol_to_nwb_dict ( protocol_key ): \"\"\" Generate a dictionary object containing all protocol title and notes. :param protocol_key: Key specifying one entry in element_lab.lab.Protocol :return: dictionary with NWB parameters \"\"\" protocol_info = ( lab . Protocol & protocol_key ) . fetch1 () return dict ( protocol = protocol_info . get ( \"protocol\" ), notes = protocol_info . get ( \"protocol_description\" ), )", "title": "protocol_to_nwb_dict()"}]}